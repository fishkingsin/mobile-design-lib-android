
plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'shot'
}

ext.enableShot = gradle.startParameter.taskNames.size() > 0 && gradle.startParameter.taskNames.get(0) == "connectedDebugAndroidTest"
def appId = "com.nmg.mobile.design"
def getVersionName = { ->
    return "0.0.1" // Replace with version Name
}

def getArtificatId = { ->
    return "mobiledesign" // Replace with library name ID
}


android {
    namespace appId
    compileSdk 34

    defaultConfig {
        minSdk 21
        targetSdk 34
        testApplicationId "com.nmg.mobile.design.test"


        testInstrumentationRunnerArguments clearPackageData: 'true'
        testInstrumentationRunner "com.karumi.shot.ShotTestRunner"
        consumerProguardFiles "consumer-rules.pro"

        if (project.ext.enableShot == true) {
            testInstrumentationRunnerArguments shot: 'true'
        }

        aarMetadata {
            minCompileSdk = 29
        }
    }

    testOptions {
        if (project.ext.enableShot == false) {
            if (!isIdeBuild) {
                execution 'ANDROIDX_TEST_ORCHESTRATOR'
            }
        }
        animationsDisabled = true
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (output != null && outputFileName.endsWith('.aar')) {
                outputFileName = "${getArtificatId()}-${variant.name}-${getVersionName()}.aar"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.6"
    }
    installation {
        installOptions '-g', '-r'
    }
    testFixtures {
        enable = true
    }
}

shot {
    tolerance = 10 //1.1%
    showOnlyFailingTestsInReports = false
}


apply from: '../dependencies.gradle'
// apply from: "$rootDir/publish.gradle"

dependencies {


    implementation project.ext.androidX.values()

    implementation project.ext.compose.values()

    implementation project.ext.coil.values()

    implementation project.ext.exoplayer.values()

    implementation project.ext.landscapist.values()

    implementation project.ext.youtubeHelper.values()
    
    testImplementation 'junit:junit:4.13.2'

    androidTestUtil 'androidx.test:orchestrator:1.4.2'

    androidTestImplementation project.ext.androidTest.values()

    androidTestImplementation project.ext.composeTest.values()

    debugImplementation project.ext.debugImplementation.values()

}

apply from: '../ktlint.gradle'



def projectScreenshotsDirectory = "$projectDir/screenshots"
def deviceScreenshotsDirectory = '/sdcard/Pictures/' + appId + '/debug/screenshots'

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    println "clearScreenshotsTask $deviceScreenshotsDirectory"
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', deviceScreenshotsDirectory
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', deviceScreenshotsDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'pull', deviceScreenshotsDirectory + '/.', projectScreenshotsDirectory
    finalizedBy {
        clearScreenshotsTask
    }

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(projectScreenshotsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest') {
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}