plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish' // Apply this plugin at the top of your library build.gradle
    id 'shot'
}

ext.enableShot = gradle.startParameter.taskNames.size() > 0 && gradle.startParameter.taskNames.get(0) == "connectedDebugAndroidTest"

def appId = "com.nmg.mobile.design"
// def githubProperties = new Properties()
// githubProperties.load(new FileInputStream(rootProject.file("github.properties"))) //Set env variable GPR_USER & GPR_API_KEY if not adding a properties file

def getVersionName = { ->
    return "0.0.1" // Replace with version Name
}

def getArtificatId = { ->
    return "mobiledesign" // Replace with library name ID
}

publishing {
    publications {
        AndroidRelease(MavenPublication) {
            groupId 'com.nmg.mobile.design' // Replace with group ID
            artifactId getArtificatId()
            version getVersionName()
            // https://github.com/gradle/gradle/issues/3635
            artifact("$buildDir/outputs/aar/${getArtificatId()}-release-${getVersionName()}.aar")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
                    {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    /* TODO: Add this back in when we have a maven repo
    repositories {
        maven {
            name = "mobile-design-lib-android"

            url = uri("https://api.bitbucket.org/2.0/repositories/$REPOSITORY_OWNER/$REPOSITORY_NAME/raw/releases")
            credentials {
                username "$mavenUser"
                password "$mavenPassword"
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    */
}



android {
    namespace 'com.nmg.mobile.design'
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33
        testApplicationId "com.nmg.mobile.design.test"


        testInstrumentationRunnerArguments clearPackageData: 'true'
        testInstrumentationRunner "com.karumi.shot.ShotTestRunner"
        consumerProguardFiles "consumer-rules.pro"

        if (project.ext.enableShot == true) {
            testInstrumentationRunnerArguments shot: 'true'
        }
    }

    testOptions {
        if (project.ext.enableShot == false) {
            if (!isIdeBuild) {
                execution 'ANDROIDX_TEST_ORCHESTRATOR'
            }
        }
        animationsDisabled = true
    }

    adbOptions {
        installOptions '-g', '-r'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (output != null && outputFileName.endsWith('.aar')) {
                outputFileName = "${getArtificatId()}-${variant.name}-${getVersionName()}.aar"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.3.2"
    }
}

shot {
    tolerance = 1.1 //1.1%
    showOnlyFailingTestsInReports = false
}


apply from: '../dependencies.gradle'
//apply from: "$rootDir/publish.gradle"

dependencies {


    implementation project.ext.androidX.values()

    implementation project.ext.compose.values()

    implementation project.ext.coil.values()

    implementation 'com.google.android.material:material:1.7.0'

    testImplementation 'junit:junit:4.13.2'

    androidTestUtil 'androidx.test:orchestrator:1.4.2'

    androidTestImplementation project.ext.androidTest.values()

    androidTestImplementation project.ext.composeTest.values()

    debugImplementation project.ext.debugImplementation.values()

}

apply from: '../ktlint.gradle'
check.dependsOn ktlint


def projectScreenshotsDirectory = "$projectDir/screenshots"
def deviceScreenshotsDirectory = '/sdcard/Pictures/' + appId + '/debug/screenshots'

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    println deviceScreenshotsDirectory
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', deviceScreenshotsDirectory
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', deviceScreenshotsDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'pull', deviceScreenshotsDirectory + '/.', projectScreenshotsDirectory
    finalizedBy {
        clearScreenshotsTask
    }

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(projectScreenshotsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest') {
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}